install.packages('FactoMineR')
library(GGally)
library("GGally")
library(dplyr)
install.packages("GGally", "dplyr", "corrplot")
install.packages(corrplot)
install.packages("corrplot)
#Set working directory
setwd("I:/Google Drive/Helsingin yliopisto/Intro to Open Data Science/IODS-project/data")
#Read the "Human development" and "Gender inequality" datas
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Load dplyr library
library(dplyr)
#Explore the datasets
dim(hd)
colnames(hd)
str(hd)
summary(hd)
dim(gii)
colnames(gii)
str(gii)
summary(gii)
#Rename the variables
colnames(hd)[1] <- "HDIrank"
colnames(hd)[2] <- "Country"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "LifeExp"
colnames(hd)[5] <- "ExpEduYrs"
colnames(hd)[6] <- "MeanEduYrs"
colnames(hd)[7] <- "GNI"
colnames(hd)[8] <- "GNIminusHDIrank"
colnames(gii)[1] <- "GIIrank"
colnames(gii)[2] <- "Country"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "MMR"
colnames(gii)[5] <- "ABR"
colnames(gii)[6] <- "FemaleParl"
colnames(gii)[7] <- "EduFemale"
colnames(gii)[8] <- "EduMale"
colnames(gii)[9] <- "LabourFemale"
colnames(gii)[10] <- "LabourMale"
#Check the new variable names
colnames(hd)
colnames(gii)
#Mutate the Gender inequality data and create two new variables
gii$EduRatio <- gii$EduFemale / gii$EduMale
gii$LabourRatio <- gii$LabourFemale / gii$LabourMale
#Checking variable names and structure of Gender inequality data
colnames(gii)
str(gii)
# Joining the datasets using Country as identifier
human <- inner_join(hd, gii, by = "Country")
#Checking variable names and structure of the new combined dataset
colnames(human)
str(human)
#Checking dimensions of the new dataset
dim(human)
# 195 observations and 19 variables
# Save joined and modified data 'human' to a file that looks good in a European version of Excel, but also has a decimal point instead of a comma
write.table(human, file = "human.csv", sep = ";", qmethod="double", row.names=FALSE)
# access the stringr package
library(stringr)
# remove the commas from GNI and create a numeric version of it
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric() -> human$GNI
# Checking if human$GNI is now numeric: looks ok.
str(human$GNI)
# Accessing dplyr library
library(dplyr)
# Keeping only desired columns
keep <- c("Country", "EduFemale", "LabourFemale", "ExpEduYrs", "LifeExp", "GNI", "MMR", "ABR", "FemaleParl")
human <- select(human, one_of(keep))
# Checking structure of human: looks ok.
str(human)
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
#Checking human: looks ok, no NA values
human
# look for regions in human$countries
human$Country
# Looks like regions are the last variables
# look at the last 10 observations of human
tail(human, n=10)
# Seems that last 7 should go
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
#Checking human$Country: looks ok, only countries
human$Country
# Define the row names of the data by the country names
rownames(human) <- human$Country
#Checking row names: ok.
rownames(human)
# remove the Country variable
human <- select(human, -Country)
# Save joined and modified data 'human' over 'human.csv' with row names
write.table(human, file = "human.csv", sep = ";", qmethod="double", row.names=TRUE, col.names = NA)
install.packages("corrplot)
#Set working directory
setwd("I:/Google Drive/Helsingin yliopisto/Intro to Open Data Science/IODS-project/data")
#Read the "Human development" and "Gender inequality" datas
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Load dplyr library
library(dplyr)
#Explore the datasets
dim(hd)
colnames(hd)
str(hd)
summary(hd)
dim(gii)
colnames(gii)
str(gii)
summary(gii)
#Rename the variables
colnames(hd)[1] <- "HDIrank"
colnames(hd)[2] <- "Country"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "LifeExp"
colnames(hd)[5] <- "ExpEduYrs"
colnames(hd)[6] <- "MeanEduYrs"
colnames(hd)[7] <- "GNI"
colnames(hd)[8] <- "GNIminusHDIrank"
colnames(gii)[1] <- "GIIrank"
colnames(gii)[2] <- "Country"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "MMR"
colnames(gii)[5] <- "ABR"
colnames(gii)[6] <- "FemaleParl"
colnames(gii)[7] <- "EduFemale"
colnames(gii)[8] <- "EduMale"
colnames(gii)[9] <- "LabourFemale"
colnames(gii)[10] <- "LabourMale"
#Check the new variable names
colnames(hd)
colnames(gii)
#Mutate the Gender inequality data and create two new variables
gii$EduRatio <- gii$EduFemale / gii$EduMale
gii$LabourRatio <- gii$LabourFemale / gii$LabourMale
#Checking variable names and structure of Gender inequality data
colnames(gii)
str(gii)
# Joining the datasets using Country as identifier
human <- inner_join(hd, gii, by = "Country")
#Checking variable names and structure of the new combined dataset
colnames(human)
str(human)
#Checking dimensions of the new dataset
dim(human)
# 195 observations and 19 variables
# Save joined and modified data 'human' to a file that looks good in a European version of Excel, but also has a decimal point instead of a comma
write.table(human, file = "human.csv", sep = ";", qmethod="double", row.names=FALSE)
# access the stringr package
library(stringr)
# remove the commas from GNI and create a numeric version of it
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric() -> human$GNI
# Checking if human$GNI is now numeric: looks ok.
str(human$GNI)
# Accessing dplyr library
library(dplyr)
# Keeping only desired columns
keep <- c("Country", "EduFemale", "LabourFemale", "ExpEduYrs", "LifeExp", "GNI", "MMR", "ABR", "FemaleParl")
human <- select(human, one_of(keep))
# Checking structure of human: looks ok.
str(human)
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
#Checking human: looks ok, no NA values
human
# look for regions in human$countries
human$Country
# Looks like regions are the last variables
# look at the last 10 observations of human
tail(human, n=10)
# Seems that last 7 should go
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
#Checking human$Country: looks ok, only countries
human$Country
# Define the row names of the data by the country names
rownames(human) <- human$Country
#Checking row names: ok.
rownames(human)
# remove the Country variable
human <- select(human, -Country)
# Save joined and modified data 'human' over 'human.csv' with row names
write.table(human, file = "human.csv", sep = ";", qmethod="double", row.names=TRUE, col.names = NA)
install.packages("corrplot")
install.packages("GGally")
install.packages("dplyr")
# load the wrangled Human data
human = read.table("data/human.csv", sep = ";", header = TRUE)
# Dimensions of the data
dim(human)
install.packages("FactoMineR")
data(tea)
# Dimensions of the data
dim(tea)
data(tea)
dim(tea)
gather(tea) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
install.packages("ggplot2")
install.packages("tidyr")
install.packages("tidyr")
?gather
install.packages(tidyr)
install.packages("tidyr")
?gather
?gather
help(gather)
install.packages("tidyverse")
?gather
library("tidyverse", lib.loc="~/Library/R/3.3/library")
plot(mca, invisible=c("none"), habillage = "quali")
gather(tea_time) %>% ggplot(,aes()) + geom_bar(colour="black", stat="identity")) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(,aes() + geom_bar(colour="black", stat="identity")) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(stat = "identity")) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
ggplot(tea_time, aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
?gather
?ggplot$gather
ggplot(aes(value), geom_bar())
# Dimensionality reduction techniques
##### This exercise analyses data from the wrangled *Human* dataset with 155 observations in 8 variables.
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# load the wrangled Human data
human = read.table("data/human.csv", sep = ";", header = TRUE)
# Dimensions of the data
dim(human)
```
##### Human is a subset of a dataset at http://hdr.undp.org/en/content/human-development-index-hdi by Tuomo Nieminen.
##### The original data combines several indicators from most countries in the world and the subset has the following variables by country:
* "GNI" = Gross National Income per capita
* "LifeExp" = Life expectancy at birth
* "ExpEduYrs" = Expected years of schooling
* "MMR" = Maternal mortality ratio
* "ABR" = Adolescent birth rate
* "FemaleParl" = Percetange of female representatives in parliament
* "EduFemale" = Proportion of females with at least secondary education
* "LabourFemale" = Proportion of females in the labour force.
The structure of the *human* dataset looks like this:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# Print structure of the data
str(human)
```
And its summary like this:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# Print summary of the data
summary(human)
```
Now, printing correlation matrix of data and visualizing it further with plots:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# Access libraries
library(ggplot2)
library(GGally)
library(dplyr)
library(corrplot)
library(FactoMineR)
library(tidyr)
# visualize the 'human' variables
ggpairs(human)
# compute the correlation matrix and visualize it with corrplot
cor(human) %>% corrplot()
```
**Correlations:**
As we can see from above visualizations, *female education* has a strong positive correlation with expected number of years in education, life expectancy and gross national indome per capita (GNI). There's also a high negative correlation with maternal mortality rate (MMR) and adolescent birth rate (ABR). In sum: Providing women with equal opportunity to education is good for everybody and the society as a whole.
*Expected years in education* has a strong positive correlation with life expectancy and a strong negative correlation with both MMR and ABR.
*Life expectancy* has a strong positive correlation with GNI and even stronger, but negative, correlation with MMR and ABR.
*GNI* correlates positively with ABR and negatively with MMR.
*MMR* has a high positive correlation with ABR.
**Distributions:**
It can also be seen from the distributions that female education is very evenly distributed among countries. Proportion of females of the labour force, individual's expected years of education and percentage of females in the parliament follow a somewhat normal distibution. Life expectancy varies between coutries with most countries at the higher end of the scale, but some still lagging behind. Gross national income per capita is still very unevenly distributed with most countries at the low end of the scale. Maternal mortality and adolescent birth rate are fortunately low in most countries, but adolescent pregnancies still seem to be an issue violating the rights of children in many parts of the world.
##### Let's perform principal component analysis on the data (unstandardized), show the variability captured by the principal components and draw a biplot.
```{r echo=TRUE, error=FALSE, warning=FALSE, message=FALSE}
# perform principal component analysis (PCA) with the SVD method
pca_human <- prcomp(human)
# print out summaries of the variables
summary(pca_human)
# draw a biplot of the PCA and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey30", "red"))
```
##### Next, we'll standardize the variables in the data and repeat the analysis.
```{r echo=TRUE, error=FALSE, warning=FALSE, message=FALSE}
# standardize the variables
human_std <- scale(human)
# perform principal component analysis (with the SVD method)
pca2_human <- prcomp(human_std)
# print out summaries of the variables
summary(pca2_human)
# draw a biplot of the principal component representation and the original variables
biplot(pca2_human, choices = 1:2, cex = c(0.8, 1), col = c("grey30", "red"))
```
##### Are the results different? Why or why not? Include captions in you plots where you describe the results by using not just your variable names, but the actual phenomenons they relate to.
##### Give your personal interpretations of the first two principal component dimensions based on the biplot drawn after PCA on the standardized human data.
##### Next, we'll load a dataset called 'Tea' from the Factominer package and look at the dimensions, structure and summary of the data:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
data(tea)
# Dimensions of the data
dim(tea)
# Structure of the data
str(tea)
# Summary of the data
summary(tea)
```
##### The data has answers from 300 individuals to 36 questions about their tea drinking habits. Accoring to information found on the Internet, the researchers have asked 300 individuals how they drink tea (18 questions), what are their product's perception (12 questions) and some personal details (4 questions).
##### Let's choose some interesting 'Tea' data variables:
* "Tea" = whether the person drinks black tea, Earl Grey or green tea
* "How" = whether the person drinks her tea raw, with lemon, with milk or with something else
* "how" = whether the person uses bagged or unbackaged tea or both
* "sugar" = whether the person uses sugar with her tea or not
* "where" = where does the person buy her tea: tea shop, chain store or both
* "lunch" = does the person have tea with lunch or not.
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
```
##### Now, let's visualize the structure of the dataset:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
ggplot(aes(value), geom_bar())
```
##### Next, we'll apply Multiple Correspondence Analysis (MCA) on some of the variables and look at the summary of the MCA:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# multiple correspondence analysis
mca <- MCA(tea_time, graph = TRUE)
# summary of the model
summary(mca)
```
Looking at the results, we can conclude that...
##### Finally, let's draw a variable biplot of the analysis:
```{r echo=FALSE, error=FALSE, warning=FALSE, message=FALSE}
# visualize MCA
plot(mca, invisible=c("none"), habillage = "quali")
```
As we can see from the plot, ...
# Dimensionality reduction techniques
##### This exercise analyses data from the wrangled *Human* dataset with 155 observations in 8 variables.
# load the wrangled Human data
human = read.table("data/human.csv", sep = ";", header = TRUE)
# Dimensions of the data
dim(human)
##### Human is a subset of a dataset at http://hdr.undp.org/en/content/human-development-index-hdi by Tuomo Nieminen.
##### The original data combines several indicators from most countries in the world and the subset has the following variables by country:
# Print structure of the data
str(human)
# Print summary of the data
summary(human)
# Access libraries
library(ggplot2)
library(GGally)
library(dplyr)
library(corrplot)
library(FactoMineR)
library(tidyr)
# visualize the 'human' variables
ggpairs(human)
# compute the correlation matrix and visualize it with corrplot
cor(human) %>% corrplot()
# perform principal component analysis (PCA) with the SVD method
pca_human <- prcomp(human)
# print out summaries of the variables
summary(pca_human)
# draw a biplot of the PCA and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey30", "red"))
##### Next, we'll standardize the variables in the data and repeat the analysis.
# standardize the variables
human_std <- scale(human)
# perform principal component analysis (with the SVD method)
pca2_human <- prcomp(human_std)
# print out summaries of the variables
summary(pca2_human)
# draw a biplot of the principal component representation and the original variables
biplot(pca2_human, choices = 1:2, cex = c(0.8, 1), col = c("grey30", "red"))
##### Are the results different? Why or why not? Include captions in you plots where you describe the results by using not just your variable names, but the actual phenomenons they relate to.
##### Give your personal interpretations of the first two principal component dimensions based on the biplot drawn after PCA on the standardized human data.
##### Next, we'll load a dataset called 'Tea' from the Factominer package and look at the dimensions, structure and summary of the data:
data(tea)
# Dimensions of the data
dim(tea)
# Structure of the data
str(tea)
# Summary of the data
summary(tea)
##### The data has answers from 300 individuals to 36 questions about their tea drinking habits. Accoring to information found on the Internet, the researchers have asked 300 individuals how they drink tea (18 questions), what are their product's perception (12 questions) and some personal details (4 questions).
##### Let's choose some interesting 'Tea' data variables:
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
##### Now, let's visualize the structure of the dataset:
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
ggplot(aes(value), geom_bar())
##### Next, we'll apply Multiple Correspondence Analysis (MCA) on some of the variables and look at the summary of the MCA:
# multiple correspondence analysis
mca <- MCA(tea_time, graph = TRUE)
# summary of the model
summary(mca)
##### Finally, let's draw a variable biplot of the analysis:
# visualize MCA
plot(mca, invisible=c("none"), habillage = "quali")
ggplot(aes(value), geom_bar())
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot()
gather(tea_time) %>% ggplot(geom_bar())
gather(tea_time) %>% ggplot(x ,geom_bar())
gather(tea_time) %>% ggplot(,geom_bar())
gather(tea_time) %>% ggplot(,geom_bar(),aes(value))
gather(tea_time) %>% ggplot(geom_bar(),aes(value))
gather(tea_time) %>% ggplot(aes(value), geom_bar())
gather(tea_time) %>% ggplot(aes(value col=black), geom_bar())
gather(tea_time) %>% ggplot(aes(value col="black"), geom_bar())
gather(tea_time) %>% ggplot(aes(value col="black"), geom_bar()) + facet_wrap("key", scales = "free")
gather(tea_time) %>% ggplot(aes(value, col="black"), geom_bar()) + facet_wrap("key", scales = "free")
gather(tea_time) %>% ggplot(aes(value, col="black"), plot()) + facet_wrap("key", scales = "free")
gather(tea_time) %>% ggplot(aes(value), plot()) + facet_wrap("key", scales = "free")
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity",
position=position_dodge(),
size=.3) +                        # Thinner lines
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
+ facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value) + geom_bar(colour="black", stat="identity",
position=position_dodge(),
size=.3) +                        # Thinner lines
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
+ facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity",
position=position_dodge(),
size=.3) +                        # Thinner lines
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
+ facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity") + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
##### Next, we'll apply Multiple Correspondence Analysis (MCA) on some of the variables and look at the summary of the MCA:
# multiple correspondence analysis
mca <- MCA(tea_time, graph = TRUE)
# summary of the model
summary(mca)
##### Finally, let's draw a variable biplot of the analysis:
# visualize MCA
plot(mca, invisible=c("none"), habillage = "quali")
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity") + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity") + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
##### Next, we'll apply Multiple Correspondence Analysis (MCA) on some of the variables and look at the summary of the MCA:
# multiple correspondence analysis
mca <- MCA(tea_time, graph = TRUE)
# summary of the model
summary(mca)
##### Finally, let's draw a variable biplot of the analysis:
# visualize MCA
plot(mca, invisible=c("none"), habillage = "quali")
gather(tea_time) %>% ggplot(aes(value), geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
##### Next, we'll apply Multiple Correspondence Analysis (MCA) on some of the variables and look at the summary of the MCA:
# multiple correspondence analysis
mca <- MCA(tea_time, graph = TRUE)
# summary of the model
summary(mca)
##### Finally, let's draw a variable biplot of the analysis:
# visualize MCA
plot(mca, invisible=c("none"), habillage = "quali")
gather(tea_time) %>% ggplot(aes(value), geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar(colour="black", stat="identity")) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes("tuut"), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(value, aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(, aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value), geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + geom_bar()) + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
?biplot
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
gather(tea_time) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
data <- as.data.set(spss.portable.file("filename.por"))
install.packages("Hmisc")
install.packages("memisc")
library(foreign)
library(memisc)
setwd("~/Google Drive/Helsingin yliopisto/Intro to Open Data Science/IODS-final")
data <- as.data.set(spss.portable.file("data/daF3150.por"))
dim(data)
str(data)
summary(data)
write.csv2(data, file = "data/lapset.csv")
